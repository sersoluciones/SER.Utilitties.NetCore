{
  "// === NPGSQL DEFAULT VALUES ANALYSIS ===": {
    "defaults": {
      "Port": "5432 (PostgreSQL default - can be omitted)",
      "Pooling": "true (can be omitted - enabled by default)",
      "MinPoolSize": "0 (no minimum connections)",
      "MaxPoolSize": "100 (sufficient for most apps)",
      "Connection_Idle_Lifetime": "3600 seconds (1 hour)",
      "Connection_Pruning_Interval": "10 seconds",
      "Command_Timeout": "30 seconds",
      "Connect_Timeout": "15 seconds",
      "Cancellation_Timeout": "30 seconds",
      "Keepalive": "0 (disabled)",
      "TCP_Keepalive": "false"
    }
  },

  "// === MINIMAL CONFIGURATION (Uses Most Defaults) ===": {
    "SERRestOptions": {
      "ConnectionString": "Host=localhost;Database=db_name;Username=postgres;Password=xxxxx"
    },
    "note": "Only essential parameters - everything else uses Npgsql defaults"
  },

  "// === OPTIMIZED MINIMAL (Few Strategic Changes) ===": {
    "SERRestOptions": {
      "ConnectionString": "Host=localhost;Database=db_name;Username=postgres;Password=xxxxx;MinPoolSize=2;Command Timeout=120"
    },
    "why_these_changes": {
      "MinPoolSize=2": "Better than default 0 - ensures 2 warm connections",
      "Command_Timeout=120": "Matches your DefaultCommandTimeout constant"
    }
  },

  "// === RECOMMENDED PRODUCTION (Strategic Overrides) ===": {
    "SERRestOptions": {
      "ConnectionString": "Host=localhost;Database=db_name;Username=postgres;Password=xxxxx;MinPoolSize=5;MaxPoolSize=50;Command Timeout=120;Connection Idle Lifetime=300"
    },
    "changes_from_defaults": {
      "MinPoolSize": "0 → 5 (warm connections)",
      "MaxPoolSize": "100 → 50 (conservative for AWS RDS)", 
      "Command_Timeout": "30 → 120 (longer queries)",
      "Connection_Idle_Lifetime": "3600 → 300 (faster cleanup)"
    }
  },

  "// === WHAT YOU CAN SAFELY REMOVE ===": {
    "can_remove_completely": [
      "Port=5432 (PostgreSQL default)",
      "Pooling=true (enabled by default)",
      "Connection Pruning Interval=10 (matches default)",
      "Connect Timeout=15 (matches default)", 
      "Cancellation Timeout=30 (matches default)"
    ],
    "can_remove_if_ok_with_defaults": [
      "MinPoolSize (default=0, but 2-5 is better)",
      "MaxPoolSize (default=100, but 50 safer for AWS)",
      "Command Timeout (default=30s, but you use 120s)",
      "Connection Idle Lifetime (default=1h, but 5min better)",
      "Keepalive (default=disabled, but useful for AWS RDS)"
    ]
  },

  "// === COMPARISON: YOUR CURRENT VS OPTIMIZED ===": {
    "your_current": {
      "connection_string": "User ID=postgres;Password=xxxxx;Host=localhost;Port=5432;Database=db_name;Timeout=0;Pooling=true;MinPoolSize=1;MaxPoolSize=128;",
      "issues": [
        "Timeout=0 (disables timeouts - dangerous!)",
        "MaxPoolSize=128 (too high for most cases)",
        "MinPoolSize=1 (minimal warm connections)"
      ]
    },
    "recommended_minimal": {
      "connection_string": "Host=localhost;Database=db_name;Username=postgres;Password=xxxxx;MinPoolSize=2;Command Timeout=120",
      "removed_from_your_config": [
        "Port=5432 (uses default)",
        "Pooling=true (uses default)", 
        "Timeout=0 (replaced with Command Timeout=120)",
        "MaxPoolSize=128 (uses default 100)"
      ],
      "benefits": "90% shorter, uses safe defaults, fixes timeout issue"
    }
  },

  "// === STEP-BY-STEP MIGRATION GUIDE ===": {
    "step_1_minimal_safe": {
      "config": "Host=localhost;Database=db_name;Username=postgres;Password=xxxxx;Command Timeout=120",
      "description": "Absolute minimum - fixes your Timeout=0 issue"
    },
    "step_2_add_pool_warmup": {
      "config": "Host=localhost;Database=db_name;Username=postgres;Password=xxxxx;MinPoolSize=2;Command Timeout=120",
      "description": "Adds connection warmup for better performance"
    },
    "step_3_production_ready": {
      "config": "Host=localhost;Database=db_name;Username=postgres;Password=xxxxx;MinPoolSize=5;MaxPoolSize=50;Command Timeout=120;Connection Idle Lifetime=300",
      "description": "Full production optimization while keeping it simple"
    }
  }
}
